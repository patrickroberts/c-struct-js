{"version":3,"sources":["node_modules/browser-pack/_prelude.js","index.js","node_modules/base64-js/index.js","node_modules/buffer/index.js","node_modules/ieee754/index.js","src/define.js","src/merge.js","src/struct.js","src/types/byte.js","src/types/char.js","src/types/float32be.js","src/types/float32le.js","src/types/float64be.js","src/types/float64le.js","src/types/index.js","src/types/int16be.js","src/types/int16le.js","src/types/int32be.js","src/types/int32le.js","src/types/int8.js","src/types/long.js","src/types/short.js","src/types/uint16be.js","src/types/uint16le.js","src/types/uint32be.js","src/types/uint32le.js","src/types/uint8.js","src/types/word.js"],"names":["f","exports","module","define","amd","window","global","self","this","Struct","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","types","Object","defineProperty","_struct2","default","enumerable","writable","value","placeHoldersCount","b64","len","tripletToBase64","num","lookup","encodeChunk","uint8","start","end","tmp","output","push","join","byteLength","toByteArray","placeHolders","arr","Arr","L","revLookup","charCodeAt","fromByteArray","extraBytes","parts","len2","Uint8Array","Array","createBuffer","K_MAX_LENGTH","RangeError","buf","__proto__","Buffer","prototype","arg","encodingOrOffset","allocUnsafe","from","TypeError","isArrayBuffer","fromArrayBuffer","fromString","fromObject","assertSize","size","alloc","fill","encoding","undefined","checked","string","isEncoding","actual","write","slice","fromArrayLike","array","byteOffset","obj","isBuffer","copy","isArrayBufferView","numberIsNaN","type","isArray","data","toString","loweredCase","utf8ToBytes","base64ToBytes","toLowerCase","slowToString","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","b","m","bidirectionalIndexOf","buffer","val","dir","arrayIndexOf","indexOf","lastIndexOf","read","indexSize","readUInt16BE","arrLength","valLength","String","foundIndex","found","j","hexWrite","offset","Number","remaining","strLen","parsed","parseInt","substr","utf8Write","blitBuffer","asciiWrite","asciiToBytes","latin1Write","base64Write","ucs2Write","utf16leToBytes","base64","Math","min","res","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","decodeCodePointsArray","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","apply","ret","out","toHex","bytes","checkOffset","ext","checkInt","max","checkIEEE754","writeFloat","littleEndian","noAssert","ieee754","writeDouble","base64clean","str","trim","replace","INVALID_BASE64_RE","units","Infinity","leadSurrogate","byteArray","c","hi","lo","src","dst","ArrayBuffer","constructor","name","isView","SlowBuffer","INSPECT_MAX_BYTES","kMaxLength","TYPED_ARRAY_SUPPORT","foo","typedArraySupport","console","error","Symbol","species","configurable","poolSize","allocUnsafeSlow","_isBuffer","compare","x","y","concat","list","pos","swap16","swap32","swap64","arguments","equals","inspect","match","target","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","toJSON","_arr","newBuf","subarray","readUIntLE","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","pow","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","set","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","d","NaN","rt","abs","isNaN","floor","log","LN2","isStruct","createGetter","get","createSetter","Class","_ref","option","_ref$byteLength","_ref$byteOffset","getter","setter","descriptor","assign","Union","key","hasOwnProperty","proto","getPrototypeOf","getOwnPropertyDescriptor","_buffer","_classCallCheck","_possibleConstructorReturn","DataView","_class","_temp","_len","descriptors","_key","reduce","_define2","_inherits","create","_len2","Classes","_key2","_merge2","extend","typedArray","bytePadding","arrayBuffer","union","_char2","_int2","_uint2","Char","char","Float32BE","float32be","Float32LE","float32le","Float64BE","float64be","Float64LE","float64le","Int16BE","int16be","Int16LE","int16le","Int32BE","int32be","Int32LE","int32le","Int8","int8","_float64be2","_float64le2","_word2","_int16be2","_int16le2","_uint16be2","_uint16le2","_byte2","Uint16BE","uint16be","Uint16LE","uint16le","Uint32BE","uint32be","Uint32LE","uint32le","Uint8","_float32be2","_float32le2","_int32be2","_int32le2","_uint32be2","_uint32le2","_short2"],"mappings":"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","file":"struct.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import Struct from './src/struct'\nimport * as types from './src/types'\n\nObject.defineProperty(Struct, 'types', {\n  enumerable: true,\n  writable: true,\n  value: types\n})\n\nmodule.exports = Struct\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction placeHoldersCount (b64) {\n  var len = b64.length\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // the number of equal signs (place holders)\n  // if there are two placeholders, than the two characters before it\n  // represent one byte\n  // if there is only one, then the three characters before it represent 2 bytes\n  // this is just a cheap hack to not do indexOf twice\n  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0\n}\n\nfunction byteLength (b64) {\n  // base64 is 4/3 + up to two characters of the original data\n  return (b64.length * 3 / 4) - placeHoldersCount(b64)\n}\n\nfunction toByteArray (b64) {\n  var i, l, tmp, placeHolders, arr\n  var len = b64.length\n  placeHolders = placeHoldersCount(b64)\n\n  arr = new Arr((len * 3 / 4) - placeHolders)\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  l = placeHolders > 0 ? len - 4 : len\n\n  var L = 0\n\n  for (i = 0; i < l; i += 4) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]\n    arr[L++] = (tmp >> 16) & 0xFF\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  if (placeHolders === 2) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[L++] = tmp & 0xFF\n  } else if (placeHolders === 1) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var output = ''\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    output += lookup[tmp >> 2]\n    output += lookup[(tmp << 4) & 0x3F]\n    output += '=='\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])\n    output += lookup[tmp >> 10]\n    output += lookup[(tmp >> 4) & 0x3F]\n    output += lookup[(tmp << 2) & 0x3F]\n    output += '='\n  }\n\n  parts.push(output)\n\n  return parts.join('')\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nvar K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('Invalid typed array length')\n  }\n  // Return an augmented `Uint8Array` instance\n  var buf = new Uint8Array(length)\n  buf.__proto__ = Buffer.prototype\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\n// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\nif (typeof Symbol !== 'undefined' && Symbol.species &&\n    Buffer[Symbol.species] === Buffer) {\n  Object.defineProperty(Buffer, Symbol.species, {\n    value: null,\n    configurable: true,\n    enumerable: false,\n    writable: false\n  })\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (isArrayBuffer(value)) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  return fromObject(value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nBuffer.prototype.__proto__ = Uint8Array.prototype\nBuffer.__proto__ = Uint8Array\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  var buf = createBuffer(length)\n\n  var actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  var buf = createBuffer(length)\n  for (var i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  var buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  buf.__proto__ = Buffer.prototype\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    var buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj) {\n    if (isArrayBufferView(obj) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n        return createBuffer(0)\n      }\n      return fromArrayLike(obj)\n    }\n\n    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n      return fromArrayLike(obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (isArrayBufferView(string) || isArrayBuffer(string)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  newBuf.__proto__ = Buffer.prototype\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : new Buffer(val, encoding)\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffers from another context (i.e. an iframe) do not pass the `instanceof` check\n// but they should be treated as valid. See: https://github.com/feross/buffer/issues/166\nfunction isArrayBuffer (obj) {\n  return obj instanceof ArrayBuffer ||\n    (obj != null && obj.constructor != null && obj.constructor.name === 'ArrayBuffer' &&\n      typeof obj.byteLength === 'number')\n}\n\n// Node 0.10 supports `ArrayBuffer` but lacks `ArrayBuffer.isView`\nfunction isArrayBufferView (obj) {\n  return (typeof ArrayBuffer.isView === 'function') && ArrayBuffer.isView(obj)\n}\n\nfunction numberIsNaN (obj) {\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","export default function defineProperty (Class, {\r\n  name, type, option,\r\n  byteLength = length.call(Class, type),\r\n  byteOffset = Class.byteLength\r\n}) {\r\n  const getter = createGetter.call(Class, type)\r\n  const setter = createSetter.call(Class, type)\r\n\r\n  const descriptor = {\r\n    configurable: true,\r\n    enumerable: true\r\n  }\r\n\r\n  if (type === 'String') {\r\n    Object.assign(descriptor, {\r\n      get () {\r\n        return getter.call(this, byteOffset, byteLength, option)\r\n      },\r\n      set (value) {\r\n        return setter.call(this, byteOffset, byteLength, value, option)\r\n      }\r\n    })\r\n  } else {\r\n    Object.assign(descriptor, {\r\n      get () {\r\n        return getter.call(this, byteOffset, option)\r\n      },\r\n      set (value) {\r\n        return setter.call(this, byteOffset, value, option)\r\n      }\r\n    })\r\n  }\r\n\r\n  Object.defineProperty(Class.prototype, name, descriptor)\r\n\r\n  return Object.assign(Class, { byteLength: byteOffset + byteLength })\r\n}\r\n\r\nfunction length (type) {\r\n  switch (type) {\r\n    case 'Int8':\r\n    case 'Uint8':\r\n      return 1\r\n    case 'Int16':\r\n    case 'Uint16':\r\n      return 2\r\n    case 'Float32':\r\n    case 'Int32':\r\n    case 'Uint32':\r\n      return 4\r\n    case 'Float64':\r\n      return 8\r\n    case 'String':\r\n      throw new TypeError('byteLength is required for String type')\r\n    default:\r\n      if (this.isStruct(type)) {\r\n        return type.byteLength\r\n      }\r\n\r\n      throw new TypeError(`Unexpected type ${type}`)\r\n  }\r\n}\r\n\r\nfunction createGetter (type) {\r\n  return this.isStruct(type) ? function getter (byteOffset) {\r\n    return type.from(this, this.byteOffset + byteOffset).get()\r\n  } : this.prototype[`get${type}`]\r\n}\r\n\r\nfunction createSetter (type) {\r\n  return this.isStruct(type) ? function setter (byteOffset, value) {\r\n    return type.from(this, this.byteOffset + byteOffset).set(value)\r\n  } : this.prototype[`set${type}`]\r\n}\r\n","export default function mergeClasses (Union, Class) {\r\n  for (const key in Class.prototype) {\r\n    if (Union.prototype.hasOwnProperty(key)) {\r\n      throw new TypeError(`Union contains conflicting key ${key}`)\r\n    }\r\n\r\n    let proto = Class.prototype\r\n\r\n    while (!proto.hasOwnProperty(key)) {\r\n      proto = Object.getPrototypeOf(proto)\r\n    }\r\n\r\n    Object.defineProperty(Union.prototype, key, Object.getOwnPropertyDescriptor(proto, key))\r\n  }\r\n\r\n  Union.byteLength = Math.max(Union.byteLength, Class.byteLength)\r\n\r\n  return Union\r\n}\r\n","import { Buffer } from 'buffer'\r\n\r\nimport defineProperty from './define'\r\nimport mergeClasses from './merge'\r\n\r\n/**\r\n * @external ArrayBuffer\r\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer|ArrayBuffer}\r\n */\r\n\r\n/**\r\n * @external DataView\r\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView|DataView}\r\n */\r\n\r\n/**\r\n * @external TypedArray\r\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray|TypedArray}\r\n */\r\n\r\n/**\r\n * @external TypeError\r\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError|TypeError}\r\n */\r\n\r\n/**\r\n * @class Struct\r\n *\r\n * @extends external:DataView\r\n *\r\n * @param {external:ArrayBuffer} buffer - An instance of ArrayBuffer to view.\r\n * @param {number} [byteOffset=0] - Byte offset at which to view ArrayBuffer.\r\n */\r\nexport default class Struct extends DataView {\r\n  /**\r\n   * Byte length of instances.\r\n   *\r\n   * @member {number} [byteLength=0]\r\n   *\r\n   * @memberof Struct\r\n   *\r\n   * @static\r\n   *\r\n   * @readonly\r\n   */\r\n  static byteLength = 0\r\n\r\n  /**\r\n   * Namespace of predefined Struct classes.\r\n   *\r\n   * @namespace types\r\n   */\r\n\r\n  /**\r\n   * Namespace of predefined types.\r\n   *\r\n   * @member {types} types\r\n   *\r\n   * @memberof Struct\r\n   *\r\n   * @static\r\n   */\r\n\r\n  /**\r\n   * Creates a class that extends Struct with members defined by arguments.\r\n   *\r\n   * @method extend\r\n   *\r\n   * @param {...Object} descriptors - Instance member definitions for extended class.\r\n   * @param {string} descriptors[].name - The member name.\r\n   * @param {string|Struct} descriptors[].type - The member type. Accepts strings 'Int8', 'Uint8', 'Int16', 'Uint16', 'Float32', 'Int32', 'Uint32', 'Float64', 'String', or any constructor that extends Struct.\r\n   * @param {*} [descriptors[].option] - An optional argument to append to the accessor methods of the member.\r\n   * @param {number} [descriptors[].byteLength] - Determined using type by default. Required when type is 'String'.\r\n   * @param {number} [descriptors[].byteOffset] - Determined using order of descriptors by default.\r\n   *\r\n   * @throws {external:TypeError} Unexpected type.\r\n   * @throws {external:TypeError} byteLength is required for String type.\r\n   *\r\n   * @return {constructor}\r\n   *\r\n   * @memberof Struct\r\n   *\r\n   * @static\r\n   *\r\n   * @example\r\n   * const Struct = require('c-struct-js')\r\n   *\r\n   * // Implementing RIFF-style chunk headers\r\n   * const Word = Struct.extend(\r\n   *   { name: 'word', type: 'String', byteLength: 4 }\r\n   * )\r\n   *\r\n   * const Chunk = Struct.extend(\r\n   *   { name: 'id', type: Word },\r\n   *   { name: 'size', type: Struct.types.Uint32LE }\r\n   * )\r\n   *\r\n   * class RIFF extends Struct.extend(\r\n   *   { name: 'chunk', type: Chunk },\r\n   *   // ...\r\n   * ) {\r\n   *   constructor () {\r\n   *     super(new ArrayBuffer(RIFF.byteLength))\r\n   *\r\n   *     this.chunk.id.word = 'RIFF'\r\n   *     this.chunk.size = this.byteLength - this.chunk.byteLength\r\n   *     // ...\r\n   *   }\r\n   * }\r\n   *\r\n   * let riff = new RIFF()\r\n   * let ab = riff.chunk.id\r\n   * let buf = Buffer.from(ab.buffer, ab.byteOffset, ab.byteLength)\r\n   *\r\n   * console.log(buf.toString())\r\n   */\r\n  static extend (...descriptors) {\r\n    return descriptors.reduce(defineProperty, class extends this {\r\n      static byteLength = this.byteLength\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Creates an instance of Struct to view given value at byteOffset.\r\n   *\r\n   * @method from\r\n   *\r\n   * @param {external:ArrayBuffer|external:TypedArray} value - A valid ArrayBuffer or TypedArray.\r\n   * @param {number} [byteOffset=0] - Byte offset at which to view value.\r\n   *\r\n   * @throws {external:TypeError} value must be a valid ArrayBuffer or view.\r\n   *\r\n   * @return {Struct}\r\n   *\r\n   * @memberof Struct\r\n   *\r\n   * @static\r\n   *\r\n   * @example\r\n   * // checking encoded size of WAV file\r\n   * const { promisify } = require('util')\r\n   * const fs = require('fs')\r\n   * const read = promisify(fs.read)\r\n   * const open = promisify(fs.open)\r\n   * const close = promisify(fs.close)\r\n   *\r\n   * // using Chunk from previous example\r\n   * // ...\r\n   *\r\n   * // bytes 36-44 contain SubChunk2 of WAV header\r\n   * open('test.wav', 'r')\r\n   *   .then(fd => {\r\n   *     return read(fd, Buffer.allocUnsafe(Chunk.byteLength), 0, Chunk.byteLength, 36)\r\n   *       .then((bytesRead, buffer) => close(fd).then(() => Chunk.from(buffer)))\r\n   *   })\r\n   *   .then(chunk => console.log('file size:', 44 + chunk.size))\r\n   */\r\n  static from (value, byteOffset = 0) {\r\n    if (!ArrayBuffer.isView(value) && !(value instanceof ArrayBuffer)) {\r\n      throw new TypeError('value must be a valid ArrayBuffer or TypedArray')\r\n    }\r\n\r\n    return new this(value.buffer || value, byteOffset)\r\n  }\r\n\r\n  /**\r\n   * Validates constructors that implement Struct.\r\n   *\r\n   * @method isStruct\r\n   *\r\n   * @param {*} value - A value to test.\r\n   *\r\n   * @return {boolean}\r\n   *\r\n   * @memberof Struct\r\n   *\r\n   * @static\r\n   *\r\n   * @example\r\n   * console.log(Struct.isStruct(Struct))   // true\r\n   * console.log(Struct.isStruct(RIFF))     // true\r\n   * console.log(Struct.isStruct(DataView)) // false - doesn't implement Struct\r\n   * console.log(Struct.isStruct(riff))     // false - is instance, not class\r\n   */\r\n  static isStruct (value) {\r\n    return typeof value === 'function' && Object.create(value.prototype) instanceof Struct\r\n  }\r\n\r\n  /**\r\n   * Creates a union class that extends Struct with members of all Classes.\r\n   *\r\n   * @method union\r\n   *\r\n   * @param {...constructor} Classes - Classes that extend Struct.\r\n   *\r\n   * @throws {external:TypeError} Union contains conflicting key.\r\n   *\r\n   * @return {constructor}\r\n   *\r\n   * @memberof Struct\r\n   *\r\n   * @static\r\n   *\r\n   * @example\r\n   * // Getting surrogate pairs of utf16le encoding\r\n   * const UTF16LE = Struct.extend(\r\n   *   { name: 'code', type: 'String', byteLength: 2, option: 'utf16le' }\r\n   * )\r\n   *\r\n   * const UTF16Pair = Struct.extend(\r\n   *   { name: 'lo', type: 'Uint8' },\r\n   *   { name: 'hi', type: 'Uint8' }\r\n   * )\r\n   *\r\n   * const UTF16 = Struct.union(Utf16le, Utf16Pair)\r\n   *\r\n   * let utf16 = new Utf16(new ArrayBuffer(UTF16.byteLength))\r\n   *\r\n   * utf16.code = '€'\r\n   *\r\n   * // € ac 20\r\n   * console.log(utf16.code, utf16.lo.toString(16), utf16.hi.toString(16))\r\n   */\r\n  static union (...Classes) {\r\n    return Classes.reduce(mergeClasses, this.extend())\r\n  }\r\n\r\n  constructor (buffer, byteOffset = 0) {\r\n    super(buffer, byteOffset, new.target.byteLength)\r\n  }\r\n\r\n  /**\r\n   * Gets string with byteLength and encoding from viewed ArrayBuffer at byteOffset.\r\n   * Depending on data and encoding, returned string may have different length than byteLength.\r\n   *\r\n   * @method getString\r\n   *\r\n   * @param {number} byteOffset - Byte offset within ArrayBuffer of string to read.\r\n   * @param {number} byteLength - Byte length within ArrayBuffer of string to read.\r\n   * @param {string} [encoding=utf8] - Encoding within ArrayBuffer of string to read.\r\n   *\r\n   * @throws {external:TypeError} encoding must be a valid string encoding.\r\n   *\r\n   * @return {string}\r\n   *\r\n   * @memberof Struct\r\n   *\r\n   * @instance\r\n   *\r\n   * @example\r\n   * // using utf16 from previous example\r\n   * // ...\r\n   *\r\n   * console.log(utf16.code === utf16.getString(0, 2, 'utf16le')) // true\r\n   */\r\n  getString (byteOffset, byteLength, encoding = 'utf8') {\r\n    return Buffer\r\n      .from(this.buffer, this.byteOffset + byteOffset, byteLength)\r\n      .toString(encoding.replace(/[\\W_]/g, '').toLowerCase())\r\n  }\r\n\r\n  /**\r\n   * Sets string with byteLength and encoding to viewed ArrayBuffer at byteOffset.\r\n   * Depending on byteLength and encoding, set string may be truncated or padded.\r\n   *\r\n   * @method setString\r\n   *\r\n   * @param {number} byteOffset - Byte offset within ArrayBuffer of string to write.\r\n   * @param {number} byteLength - Byte length within ArrayBuffer of string to write.\r\n   * @param {string} value - String value to write to ArrayBuffer.\r\n   * @param {string} [encoding=utf8] - Encoding within ArrayBuffer of string to write.\r\n   *\r\n   * @throws {external:TypeError} encoding must be a valid string encoding.\r\n   *\r\n   * @memberof Struct\r\n   *\r\n   * @instance\r\n   *\r\n   * @example\r\n   * // using utf16 from previous example\r\n   * // ...\r\n   *\r\n   * utf16.setString(0, 2, '$', 'utf16le')\r\n   *\r\n   * // $ 24 0\r\n   * console.log(utf16.code, utf16.lo.toString(16), utf16.hi.toString(16))\r\n   */\r\n  setString (byteOffset, byteLength, value, encoding = 'utf8') {\r\n    Buffer\r\n      .from(String(value), encoding.replace(/[\\W_]/g, '').toLowerCase())\r\n      .copy(Buffer.from(this.buffer, this.byteOffset + byteOffset, byteLength))\r\n  }\r\n\r\n  /**\r\n   * Default member getter when accessed as a member of a parent Struct.\r\n   *\r\n   * @method get\r\n   *\r\n   * @memberof Struct\r\n   *\r\n   * @instance\r\n   *\r\n   * @example\r\n   * // Better implementation for RIFF-style chunk headers\r\n   * class Word extends Struct.extend(\r\n   *   { name: 'word', type: 'String', byteLength: 4 }\r\n   * ) {\r\n   *   get () { return this.word }\r\n   *   set (string) { this.word = string }\r\n   * }\r\n   *\r\n   * const Chunk = Struct.extend(\r\n   *   { name: 'id', type: Word },\r\n   *   { name: 'size', type: Struct.types.Uint32LE }\r\n   * )\r\n   *\r\n   * // Other structs...\r\n   *\r\n   * class RIFF extends Struct.extend(\r\n   *   { name: 'chunk', type: Chunk },\r\n   *   // Other fields...\r\n   * ) {\r\n   *   constructor (arrayBuffer = new ArrayBuffer(RIFF.byteLength), byteOffset = 0) {\r\n   *     super(arrayBuffer, byteOffset)\r\n   *\r\n   *     this.chunk.id = 'RIFF'\r\n   *     this.chunk.size = this.byteLength - this.chunk.byteLength\r\n   *     // ...\r\n   *   }\r\n   * }\r\n   *\r\n   * let riff = new RIFF()\r\n   * let id = riff.chunk.id\r\n   *\r\n   * // 'RIFF' instead of instance of Word\r\n   * console.log(id)\r\n   */\r\n  get () {\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Sets memory in ArrayBuffer starting at byteOffset with data from typedArray.\r\n   *\r\n   * @method set\r\n   *\r\n   * @param {external:TypedArray} typedArray - View of data to copy.\r\n   * @param {number} [byteOffset=0] - Byte offset within ArrayBuffer at which to write.\r\n   *\r\n   * @memberof Struct\r\n   *\r\n   * @instance\r\n   *\r\n   * @example\r\n   * // reading header of WAV file into instance of RIFF\r\n   *\r\n   * // using RIFF from previous example\r\n   * // ...\r\n   * let riff = new RIFF()\r\n   *\r\n   * open('test.wav', 'r')\r\n   *   .then(fd => {\r\n   *     return read(fd, Buffer.allocUnsafe(RIFF.byteLength), 0, RIFF.byteLength, 0)\r\n   *       .then((bytesRead, buffer) => close(fd).then(() => buffer))\r\n   *   })\r\n   *   .then(buffer => {\r\n   *     riff.set(buffer)\r\n   *     // populated with header bytes from test.wav\r\n   *     // ...\r\n   *   })\r\n   */\r\n  set (typedArray, byteOffset = 0) {\r\n    new Uint8Array(this.buffer, this.byteOffset + byteOffset, this.byteLength).set(typedArray)\r\n  }\r\n\r\n  /**\r\n   * Initializes the next chunk of the buffer as another instance of Struct.\r\n   *\r\n   * @method next\r\n   *\r\n   * @param {constructor} [constructor=this.constructor] - The Struct class with which to initialize.\r\n   * @param {number} [bytePadding=0] - Amount of bytes after the end of this to begin ArrayBuffer view.\r\n   *\r\n   * @throws {external:TypeError} constructor must implement Struct.\r\n   *\r\n   * @memberof Struct\r\n   *\r\n   * @instance\r\n   *\r\n   * @example\r\n   * // iterating through a large dataset\r\n   * const readFile = promisify(fs.readFile)\r\n   *\r\n   * readFile('test.wav')\r\n   *   .then(buffer => {\r\n   *     for (let struct = new Struct.types.Uint8(buffer.buffer, 44); struct !== null; struct = struct.next()) {\r\n   *       // iterates through each byte of sound data\r\n   *       console.log(struct.uint8) // 0-255\r\n   *     }\r\n   *   })\r\n   */\r\n  next (constructor = this.constructor, bytePadding = 0) {\r\n    if (!Struct.isStruct(constructor)) {\r\n      throw new TypeError('constructor must implement Struct')\r\n    }\r\n\r\n    const arrayBuffer = this.buffer\r\n    const byteOffset = this.byteOffset + this.byteLength + bytePadding\r\n\r\n    if (byteOffset + constructor.byteLength > arrayBuffer.byteLength) {\r\n      return null\r\n    }\r\n\r\n    return constructor.from(arrayBuffer, byteOffset)\r\n  }\r\n\r\n  /**\r\n   * Initializes the previous chunk of the buffer as another instance of Struct.\r\n   *\r\n   * @method prev\r\n   *\r\n   * @param {constructor} [constructor=this.constructor] - The Struct class with which to initialize.\r\n   * @param {number} [bytePadding=0] - Amount of bytes before the end of this to end ArrayBuffer view.\r\n   *\r\n   * @throws {external:TypeError} constructor must implement Struct.\r\n   *\r\n   * @memberof Struct\r\n   *\r\n   * @instance\r\n   *\r\n   * @example\r\n   * // accessing header of first data\r\n   *\r\n   * readFile('test.wav')\r\n   *   .then(buffer => {\r\n   *     let data = new Struct.types.Uint8(buffer.buffer, 44)\r\n   *     // to properly initialize RIFF header at byteOffset of 0\r\n   *     let riff = data.prev(RIFF, data.byteOffset - Chunk.byteLength)\r\n   *\r\n   *     // 'RIFF'\r\n   *     console.log(riff.chunk.id)\r\n   *   })\r\n   */\r\n  prev (constructor = this.constructor, bytePadding = 0) {\r\n    if (!Struct.isStruct(constructor)) {\r\n      throw new TypeError('constructor must implement Struct')\r\n    }\r\n\r\n    const arrayBuffer = this.buffer\r\n    const byteOffset = this.byteOffset - bytePadding - constructor.byteLength\r\n\r\n    if (byteOffset < 0) {\r\n      return null\r\n    }\r\n\r\n    return constructor.from(arrayBuffer, byteOffset)\r\n  }\r\n}\r\n","import Struct from '../struct'\r\n\r\nimport Char from './char'\r\nimport Int8 from './int8'\r\nimport Uint8 from './uint8'\r\n\r\n/**\r\n * A union of all 1-byte predefined types.\r\n *\r\n * @class Byte\r\n *\r\n * @extends Struct\r\n *\r\n * @borrows types.Char#char as #char\r\n * @borrows types.Int8#int8 as #int8\r\n * @borrows types.Uint8#uint8 as #uint8\r\n *\r\n * @memberof types\r\n *\r\n * @mixin\r\n */\r\n\r\n/**\r\n * Byte length of instances.\r\n *\r\n * @member {number} [byteLength=1]\r\n *\r\n * @memberof types.Byte\r\n *\r\n * @static\r\n *\r\n * @readonly\r\n */\r\nexport default Struct.union(\r\n  Char,\r\n  Int8,\r\n  Uint8\r\n)\r\n","import Struct from '../struct'\r\n\r\n/**\r\n * A predefined type for storing a binary-encoded string character.\r\n *\r\n * @class Char\r\n *\r\n * @extends Struct\r\n *\r\n * @memberof types\r\n *\r\n * @mixin\r\n */\r\n\r\n/**\r\n * Byte length of instances.\r\n *\r\n * @member {number} [byteLength=1]\r\n *\r\n * @memberof types.Char\r\n *\r\n * @static\r\n *\r\n * @readonly\r\n */\r\nexport default class Char extends Struct.extend(\r\n  /**\r\n   * A single byte binary string character. Accepts any characters from the {@link https://en.wikipedia.org/wiki/ISO/IEC_8859-1|latin-1} block.\r\n   *\r\n   * @member {String} char\r\n   *\r\n   * @memberof types.Char\r\n   *\r\n   * @instance\r\n   */\r\n  { name: 'char', type: 'String', byteLength: 1, option: 'binary' }\r\n) {\r\n  /**\r\n   * @method get\r\n   *\r\n   * @return {String} char\r\n   *\r\n   * @memberof types.Char\r\n   *\r\n   * @instance\r\n   */\r\n  get () { return this.char }\r\n\r\n  /**\r\n   * @method set\r\n   *\r\n   * @param {String} value\r\n   *\r\n   * @memberof types.Char\r\n   *\r\n   * @instance\r\n   */\r\n  set (value) { this.char = value }\r\n}\r\n","import Struct from '../struct'\r\n\r\n/**\r\n * A predefined type for storing a 32-bit floating point number in big-endian byte order.\r\n *\r\n * @class Float32BE\r\n *\r\n * @extends Struct\r\n *\r\n * @memberof types\r\n *\r\n * @mixin\r\n */\r\n\r\n/**\r\n * Byte length of instances.\r\n *\r\n * @member {number} [byteLength=4]\r\n *\r\n * @memberof types.Float32BE\r\n *\r\n * @static\r\n *\r\n * @readonly\r\n */\r\nexport default class Float32BE extends Struct.extend(\r\n  /**\r\n   * A 32-bit floating point number accessed in big-endian byte order.\r\n   *\r\n   * @see {@link https://en.wikipedia.org/wiki/Single-precision_floating-point_format#IEEE_754_single-precision_binary_floating-point_format:_binary32|IEEE 754 Single-precision floating-point format}\r\n   *\r\n   * @member {number} float32be\r\n   *\r\n   * @memberof types.Float32BE\r\n   *\r\n   * @instance\r\n   */\r\n  { name: 'float32be', type: 'Float32', option: false }\r\n) {\r\n  /**\r\n   * @method get\r\n   *\r\n   * @return {number} float32be\r\n   *\r\n   * @memberof types.Float32BE\r\n   *\r\n   * @instance\r\n   */\r\n  get () { return this.float32be }\r\n\r\n  /**\r\n   * @method set\r\n   *\r\n   * @param {number} value\r\n   *\r\n   * @memberof types.Float32BE\r\n   *\r\n   * @instance\r\n   */\r\n  set (value) { this.float32be = value }\r\n}\r\n","import Struct from '../struct'\r\n\r\n/**\r\n * A predefined type for storing a 32-bit floating point number in little-endian byte order.\r\n *\r\n * @class Float32LE\r\n *\r\n * @extends Struct\r\n *\r\n * @memberof types\r\n *\r\n * @mixin\r\n */\r\n\r\n/**\r\n * Byte length of instances.\r\n *\r\n * @member {number} [byteLength=4]\r\n *\r\n * @memberof types.Float32LE\r\n *\r\n * @static\r\n *\r\n * @readonly\r\n */\r\nexport default class Float32LE extends Struct.extend(\r\n  /**\r\n   * A 32-bit floating point number accessed in big-endian byte order.\r\n   *\r\n   * @see {@link https://en.wikipedia.org/wiki/Single-precision_floating-point_format#IEEE_754_single-precision_binary_floating-point_format:_binary32|IEEE 754 Single-precision floating-point format}\r\n   *\r\n   * @member {number} float32le\r\n   *\r\n   * @memberof types.Float32LE\r\n   *\r\n   * @instance\r\n   */\r\n  { name: 'float32le', type: 'Float32', option: false }\r\n) {\r\n  /**\r\n   * @method get\r\n   *\r\n   * @return {number} float32le\r\n   *\r\n   * @memberof types.Float32LE\r\n   *\r\n   * @instance\r\n   */\r\n  get () { return this.float32le }\r\n\r\n  /**\r\n   * @method set\r\n   *\r\n   * @param {number} value\r\n   *\r\n   * @memberof types.Float32LE\r\n   *\r\n   * @instance\r\n   */\r\n  set (value) { this.float32le = value }\r\n}\r\n","import Struct from '../struct'\r\n\r\n/**\r\n * A predefined type for storing a 64-bit floating point number in big-endian byte order.\r\n *\r\n * @class Float64BE\r\n *\r\n * @extends Struct\r\n *\r\n * @memberof types\r\n *\r\n * @mixin\r\n */\r\n\r\n/**\r\n * Byte length of instances.\r\n *\r\n * @member {number} [byteLength=8]\r\n *\r\n * @memberof types.Float64BE\r\n *\r\n * @static\r\n *\r\n * @readonly\r\n */\r\nexport default class Float64BE extends Struct.extend(\r\n  /**\r\n   * A 64-bit floating point number accessed in big-endian byte order.\r\n   *\r\n   * @see {@link https://en.wikipedia.org/wiki/Double-precision_floating-point_format#IEEE_754_double-precision_binary_floating-point_format:_binary64|IEEE 754 Double-precision floating-point format}\r\n   *\r\n   * @member {number} float64be\r\n   *\r\n   * @memberof types.Float64BE\r\n   *\r\n   * @instance\r\n   */\r\n  { name: 'float64be', type: 'Float64', option: false }\r\n) {\r\n  /**\r\n   * @method get\r\n   *\r\n   * @return {number} float64be\r\n   *\r\n   * @memberof types.Float64BE\r\n   *\r\n   * @instance\r\n   */\r\n  get () { return this.float64be }\r\n\r\n  /**\r\n   * @method set\r\n   *\r\n   * @param {number} value\r\n   *\r\n   * @memberof types.Float64BE\r\n   *\r\n   * @instance\r\n   */\r\n  set (value) { this.float64be = value }\r\n}\r\n","import Struct from '../struct'\r\n\r\n/**\r\n * A predefined type for storing a 64-bit floating point number in little-endian byte order.\r\n *\r\n * @class Float64LE\r\n *\r\n * @extends Struct\r\n *\r\n * @memberof types\r\n *\r\n * @mixin\r\n */\r\n\r\n/**\r\n * Byte length of instances.\r\n *\r\n * @member {number} [byteLength=8]\r\n *\r\n * @memberof types.Float64LE\r\n *\r\n * @static\r\n *\r\n * @readonly\r\n */\r\nexport default class Float64LE extends Struct.extend(\r\n  /**\r\n   * A 64-bit floating point number accessed in little-endian byte order.\r\n   *\r\n   * @see {@link https://en.wikipedia.org/wiki/Double-precision_floating-point_format#IEEE_754_double-precision_binary_floating-point_format:_binary64|IEEE 754 Double-precision floating-point format}\r\n   *\r\n   * @member {number} float64le\r\n   *\r\n   * @memberof types.Float64LE\r\n   *\r\n   * @instance\r\n   */\r\n  { name: 'float64le', type: 'Float64', option: true }\r\n) {\r\n  /**\r\n   * @method get\r\n   *\r\n   * @return {number} float64le\r\n   *\r\n   * @memberof types.Float64LE\r\n   *\r\n   * @instance\r\n   */\r\n  get () { return this.float64le }\r\n\r\n  /**\r\n   * @method set\r\n   *\r\n   * @param {number} value\r\n   *\r\n   * @memberof types.Float64LE\r\n   *\r\n   * @instance\r\n   */\r\n  set (value) { this.float64le = value }\r\n}\r\n","export { default as Char } from './char'\r\nexport { default as Float32BE } from './float32be'\r\nexport { default as Float32LE } from './float32le'\r\nexport { default as Float64BE } from './float64be'\r\nexport { default as Float64LE } from './float64le'\r\nexport { default as Int8 } from './int8'\r\nexport { default as Int16BE } from './int16be'\r\nexport { default as Int16LE } from './int16le'\r\nexport { default as Int32BE } from './int32be'\r\nexport { default as Int32LE } from './int32le'\r\nexport { default as Uint8 } from './uint8'\r\nexport { default as Uint16BE } from './uint16be'\r\nexport { default as Uint16LE } from './uint16le'\r\nexport { default as Uint32BE } from './uint32be'\r\nexport { default as Uint32LE } from './uint32le'\r\nexport { default as Byte } from './byte'\r\nexport { default as Short } from './short'\r\nexport { default as Word } from './word'\r\nexport { default as Long } from './long'\r\n","import Struct from '../struct'\r\n\r\n/**\r\n * A predefined type for storing a 16-bit signed integer in big-endian byte order.\r\n *\r\n * @class Int16BE\r\n *\r\n * @extends Struct\r\n *\r\n * @memberof types\r\n *\r\n * @mixin\r\n */\r\n\r\n/**\r\n * Byte length of instances.\r\n *\r\n * @member {number} [byteLength=2]\r\n *\r\n * @memberof types.Int16BE\r\n *\r\n * @static\r\n *\r\n * @readonly\r\n */\r\nexport default class Int16BE extends Struct.extend(\r\n  /**\r\n   * A 16-bit signed integer accessed in big-endian byte order.\r\n   *\r\n   * @member {number} int16be\r\n   *\r\n   * @memberof types.Int16BE\r\n   *\r\n   * @instance\r\n   */\r\n  { name: 'int16be', type: 'Int16', option: false }\r\n) {\r\n  /**\r\n   * @method get\r\n   *\r\n   * @return {number} int16be\r\n   *\r\n   * @memberof types.Int16BE\r\n   *\r\n   * @instance\r\n   */\r\n  get () { return this.int16be }\r\n\r\n  /**\r\n   * @method set\r\n   *\r\n   * @param {number} value\r\n   *\r\n   * @memberof types.Int16BE\r\n   *\r\n   * @instance\r\n   */\r\n  set (value) { this.int16be = value }\r\n}\r\n","import Struct from '../struct'\r\n\r\n/**\r\n * A predefined type for storing a 16-bit signed integer in little-endian byte order.\r\n *\r\n * @class Int16LE\r\n *\r\n * @extends Struct\r\n *\r\n * @memberof types\r\n *\r\n * @mixin\r\n */\r\n\r\n/**\r\n * Byte length of instances.\r\n *\r\n * @member {number} [byteLength=2]\r\n *\r\n * @memberof types.Int16LE\r\n *\r\n * @static\r\n *\r\n * @readonly\r\n */\r\nexport default class Int16LE extends Struct.extend(\r\n  /**\r\n   * A 16-bit signed integer accessed in little-endian byte order.\r\n   *\r\n   * @member {number} int16le\r\n   *\r\n   * @memberof types.Int16LE\r\n   *\r\n   * @instance\r\n   */\r\n  { name: 'int16le', type: 'Int16', option: true }\r\n) {\r\n  /**\r\n   * @method get\r\n   *\r\n   * @return {number} int16le\r\n   *\r\n   * @memberof types.Int16LE\r\n   *\r\n   * @instance\r\n   */\r\n  get () { return this.int16le }\r\n\r\n  /**\r\n   * @method set\r\n   *\r\n   * @param {number} value\r\n   *\r\n   * @memberof types.Int16LE\r\n   *\r\n   * @instance\r\n   */\r\n  set (value) { this.int16le = value }\r\n}\r\n","import Struct from '../struct'\r\n\r\n/**\r\n * A predefined type for storing a 32-bit signed integer in big-endian byte order.\r\n *\r\n * @class Int32BE\r\n *\r\n * @extends Struct\r\n *\r\n * @memberof types\r\n *\r\n * @mixin\r\n */\r\n\r\n/**\r\n * Byte length of instances.\r\n *\r\n * @member {number} [byteLength=4]\r\n *\r\n * @memberof types.Int32BE\r\n *\r\n * @static\r\n *\r\n * @readonly\r\n */\r\nexport default class Int32BE extends Struct.extend(\r\n  /**\r\n   * A 32-bit signed integer accessed in big-endian byte order.\r\n   *\r\n   * @member {number} int32be\r\n   *\r\n   * @memberof types.Int32BE\r\n   *\r\n   * @instance\r\n   */\r\n  { name: 'int32be', type: 'Int32', option: false }\r\n) {\r\n  /**\r\n   * @method get\r\n   *\r\n   * @return {number} int32be\r\n   *\r\n   * @memberof types.Int32BE\r\n   *\r\n   * @instance\r\n   */\r\n  get () { return this.int32be }\r\n\r\n  /**\r\n   * @method set\r\n   *\r\n   * @param {number} value\r\n   *\r\n   * @memberof types.Int32BE\r\n   *\r\n   * @instance\r\n   */\r\n  set (value) { this.int32be = value }\r\n}\r\n","import Struct from '../struct'\r\n\r\n/**\r\n * A predefined type for storing a 32-bit signed integer in little-endian byte order.\r\n *\r\n * @class Int32LE\r\n *\r\n * @extends Struct\r\n *\r\n * @memberof types\r\n *\r\n * @mixin\r\n */\r\n\r\n/**\r\n * Byte length of instances.\r\n *\r\n * @member {number} [byteLength=4]\r\n *\r\n * @memberof types.Int32LE\r\n *\r\n * @static\r\n *\r\n * @readonly\r\n */\r\nexport default class Int32LE extends Struct.extend(\r\n  /**\r\n   * A 32-bit signed integer accessed in big-endian byte order.\r\n   *\r\n   * @member {number} int32le\r\n   *\r\n   * @memberof types.Int32LE\r\n   *\r\n   * @instance\r\n   */\r\n  { name: 'int32le', type: 'Int32', option: true }\r\n) {\r\n  /**\r\n   * @method get\r\n   *\r\n   * @return {number} int32le\r\n   *\r\n   * @memberof types.Int32LE\r\n   *\r\n   * @instance\r\n   */\r\n  get () { return this.int32le }\r\n\r\n  /**\r\n   * @method set\r\n   *\r\n   * @param {number} value\r\n   *\r\n   * @memberof types.Int32LE\r\n   *\r\n   * @instance\r\n   */\r\n  set (value) { this.int32le = value }\r\n}\r\n","import Struct from '../struct'\r\n\r\n/**\r\n * A predefined type for storing an 8-bit signed integer.\r\n *\r\n * @class Int8\r\n *\r\n * @extends Struct\r\n *\r\n * @memberof types\r\n *\r\n * @mixin\r\n */\r\n\r\n/**\r\n * Byte length of instances.\r\n *\r\n * @member {number} [byteLength=1]\r\n *\r\n * @memberof types.Int8\r\n *\r\n * @static\r\n *\r\n * @readonly\r\n */\r\nexport default class Int8 extends Struct.extend(\r\n  /**\r\n   * An 8-bit signed integer.\r\n   *\r\n   * @member {number} int8\r\n   *\r\n   * @memberof types.Int8\r\n   *\r\n   * @instance\r\n   */\r\n  { name: 'int8', type: 'Int8' }\r\n) {\r\n  /**\r\n   * @method get\r\n   *\r\n   * @return {number} int8\r\n   *\r\n   * @memberof types.Int8\r\n   *\r\n   * @instance\r\n   */\r\n  get () { return this.int8 }\r\n\r\n  /**\r\n   * @method set\r\n   *\r\n   * @param {number} value\r\n   *\r\n   * @memberof types.Int8\r\n   *\r\n   * @instance\r\n   */\r\n  set (value) { this.int8 = value }\r\n}\r\n","import Struct from '../struct'\r\n\r\nimport Word from './word'\r\nimport Float64BE from './float64be'\r\nimport Float64LE from './float64le'\r\n\r\n/**\r\n * A union of all 8-byte predefined types.\r\n *\r\n * @class Long\r\n *\r\n * @extends Struct\r\n *\r\n * @borrows types.Float64BE#float64be as #float64be\r\n * @borrows types.Float64LE#float64le as #float64le\r\n *\r\n * @memberof types\r\n *\r\n * @mixin\r\n */\r\n\r\n/**\r\n * Byte length of instances.\r\n *\r\n * @member {number} [byteLength=8]\r\n *\r\n * @memberof types.Long\r\n *\r\n * @static\r\n *\r\n * @readonly\r\n */\r\nexport default Struct.union(\r\n  Float64BE,\r\n  Float64LE,\r\n  Struct.extend(\r\n    /**\r\n     * First 4 bytes of ArrayBuffer as Word.\r\n     *\r\n     * @member {Word} lo\r\n     *\r\n     * @memberof Long\r\n     *\r\n     * @instance\r\n     */\r\n    { name: 'lo', type: Word },\r\n\r\n    /**\r\n     * Last 4 bytes of ArrayBuffer as Word.\r\n     *\r\n     * @member {Word} hi\r\n     *\r\n     * @memberof Long\r\n     *\r\n     * @instance\r\n     */\r\n    { name: 'hi', type: Word }\r\n  )\r\n)\r\n","import Struct from '../struct'\r\n\r\nimport Byte from './byte'\r\nimport Int16BE from './int16be'\r\nimport Int16LE from './int16le'\r\nimport Uint16BE from './uint16be'\r\nimport Uint16LE from './uint16le'\r\n\r\n/**\r\n * A union of all 2-byte predefined types.\r\n *\r\n * @class Short\r\n *\r\n * @extends Struct\r\n *\r\n * @borrows types.Int16BE#int16be as #int16be\r\n * @borrows types.Int16LE#int16le as #int16le\r\n * @borrows types.Uint16BE#uint16be as #uint16be\r\n * @borrows types.Uint16LE#uint16le as #uint16le\r\n *\r\n * @memberof types\r\n *\r\n * @mixin\r\n */\r\n\r\n/**\r\n * Byte length of instances.\r\n *\r\n * @member {number} [byteLength=2]\r\n *\r\n * @memberof types.Short\r\n *\r\n * @static\r\n *\r\n * @readonly\r\n */\r\nexport default Struct.union(\r\n  Int16BE,\r\n  Int16LE,\r\n  Uint16BE,\r\n  Uint16LE,\r\n  Struct.extend(\r\n    /**\r\n     * First byte of ArrayBuffer as Byte.\r\n     *\r\n     * @member {Byte} lo\r\n     *\r\n     * @memberof Short\r\n     *\r\n     * @instance\r\n     */\r\n    { name: 'lo', type: Byte },\r\n\r\n    /**\r\n     * Last byte of ArrayBuffer as Byte.\r\n     *\r\n     * @member {Byte} hi\r\n     *\r\n     * @memberof Short\r\n     *\r\n     * @instance\r\n     */\r\n    { name: 'hi', type: Byte }\r\n  )\r\n)\r\n","import Struct from '../struct'\r\n\r\n/**\r\n * A predefined type for storing a 16-bit unsigned integer in big-endian byte order.\r\n *\r\n * @class Uint16BE\r\n *\r\n * @extends Struct\r\n *\r\n * @memberof types\r\n *\r\n * @mixin\r\n */\r\n\r\n/**\r\n * Byte length of instances.\r\n *\r\n * @member {number} [byteLength=2]\r\n *\r\n * @memberof types.Uint16BE\r\n *\r\n * @static\r\n *\r\n * @readonly\r\n */\r\nexport default class Uint16BE extends Struct.extend(\r\n  /**\r\n   * A 16-bit unsigned integer accessed in big-endian byte order.\r\n   *\r\n   * @member {number} uint16be\r\n   *\r\n   * @memberof types.Uint16BE\r\n   *\r\n   * @instance\r\n   */\r\n  { name: 'uint16be', type: 'Uint16', option: false }\r\n) {\r\n  /**\r\n   * @method get\r\n   *\r\n   * @return {number} uint16be\r\n   *\r\n   * @memberof types.Uint16BE\r\n   *\r\n   * @instance\r\n   */\r\n  get () { return this.uint16be }\r\n\r\n  /**\r\n   * @method set\r\n   *\r\n   * @param {number} value\r\n   *\r\n   * @memberof types.Uint16BE\r\n   *\r\n   * @instance\r\n   */\r\n  set (value) { this.uint16be = value }\r\n}\r\n","import Struct from '../struct'\r\n\r\n/**\r\n * A predefined type for storing a 16-bit unsigned integer in little-endian byte order.\r\n *\r\n * @class Uint16LE\r\n *\r\n * @extends Struct\r\n *\r\n * @memberof types\r\n *\r\n * @mixin\r\n */\r\n\r\n/**\r\n * Byte length of instances.\r\n *\r\n * @member {number} [byteLength=2]\r\n *\r\n * @memberof types.Uint16LE\r\n *\r\n * @static\r\n *\r\n * @readonly\r\n */\r\nexport default class Uint16LE extends Struct.extend(\r\n  /**\r\n   * A 16-bit unsigned integer accessed in little-endian byte order.\r\n   *\r\n   * @member {number} uint16le\r\n   *\r\n   * @memberof types.Uint16LE\r\n   *\r\n   * @instance\r\n   */\r\n  { name: 'uint16le', type: 'Uint16', option: true }\r\n) {\r\n  /**\r\n   * @method get\r\n   *\r\n   * @return {number} uint16le\r\n   *\r\n   * @memberof types.Uint16LE\r\n   *\r\n   * @instance\r\n   */\r\n  get () { return this.uint16le }\r\n\r\n  /**\r\n   * @method set\r\n   *\r\n   * @param {number} value\r\n   *\r\n   * @memberof types.Uint16LE\r\n   *\r\n   * @instance\r\n   */\r\n  set (value) { this.uint16le = value }\r\n}\r\n","import Struct from '../struct'\r\n\r\n/**\r\n * A predefined type for storing a 32-bit unsigned integer in big-endian byte order.\r\n *\r\n * @class Uint32BE\r\n *\r\n * @extends Struct\r\n *\r\n * @memberof types\r\n *\r\n * @mixin\r\n */\r\n\r\n/**\r\n * Byte length of instances.\r\n *\r\n * @member {number} [byteLength=4]\r\n *\r\n * @memberof types.Uint32BE\r\n *\r\n * @static\r\n *\r\n * @readonly\r\n */\r\nexport default class Uint32BE extends Struct.extend(\r\n  /**\r\n   * A 32-bit unsigned integer accessed in big-endian byte order.\r\n   *\r\n   * @member {number} uint32be\r\n   *\r\n   * @memberof types.Uint32BE\r\n   *\r\n   * @instance\r\n   */\r\n  { name: 'uint32be', type: 'Uint32', option: false }\r\n) {\r\n  /**\r\n   * @method get\r\n   *\r\n   * @return {number} uint32be\r\n   *\r\n   * @memberof types.Uint32BE\r\n   *\r\n   * @instance\r\n   */\r\n  get () { return this.uint32be }\r\n\r\n  /**\r\n   * @method set\r\n   *\r\n   * @param {number} value\r\n   *\r\n   * @memberof types.Uint32BE\r\n   *\r\n   * @instance\r\n   */\r\n  set (value) { this.uint32be = value }\r\n}\r\n","import Struct from '../struct'\r\n\r\n/**\r\n * A predefined type for storing a 32-bit unsigned integer in little-endian byte order.\r\n *\r\n * @class Uint32LE\r\n *\r\n * @extends Struct\r\n *\r\n * @memberof types\r\n *\r\n * @mixin\r\n */\r\n\r\n/**\r\n * Byte length of instances.\r\n *\r\n * @member {number} [byteLength=4]\r\n *\r\n * @memberof types.Uint32LE\r\n *\r\n * @static\r\n *\r\n * @readonly\r\n */\r\nexport default class Uint32LE extends Struct.extend(\r\n  /**\r\n   * A 32-bit unsigned integer accessed in little-endian byte order.\r\n   *\r\n   * @member {number} uint32le\r\n   *\r\n   * @memberof types.Uint32LE\r\n   *\r\n   * @instance\r\n   */\r\n  { name: 'uint32le', type: 'Uint32', option: true }\r\n) {\r\n  /**\r\n   * @method get\r\n   *\r\n   * @return {number} uint32le\r\n   *\r\n   * @memberof types.Uint32LE\r\n   *\r\n   * @instance\r\n   */\r\n  get () { return this.uint32le }\r\n\r\n  /**\r\n   * @method set\r\n   *\r\n   * @param {number} value\r\n   *\r\n   * @memberof types.Uint32LE\r\n   *\r\n   * @instance\r\n   */\r\n  set (value) { this.uint32le = value }\r\n}\r\n","import Struct from '../struct'\r\n\r\n/**\r\n * A predefined type for storing an 8-bit unsigned integer.\r\n *\r\n * @class Uint8\r\n *\r\n * @extends Struct\r\n *\r\n * @memberof types\r\n *\r\n * @mixin\r\n */\r\n\r\n/**\r\n * Byte length of instances.\r\n *\r\n * @member {number} [byteLength=1]\r\n *\r\n * @memberof types.Uint8\r\n *\r\n * @static\r\n *\r\n * @readonly\r\n */\r\nexport default class Uint8 extends Struct.extend(\r\n  /**\r\n   * An 8-bit unsigned integer.\r\n   *\r\n   * @member {number} uint8\r\n   *\r\n   * @memberof types.Uint8\r\n   *\r\n   * @instance\r\n   */\r\n  { name: 'uint8', type: 'Uint8' }\r\n) {\r\n  /**\r\n   * @method get\r\n   *\r\n   * @return {number} uint8\r\n   *\r\n   * @memberof types.Uint8\r\n   *\r\n   * @instance\r\n   */\r\n  get () { return this.uint8 }\r\n\r\n  /**\r\n   * @method set\r\n   *\r\n   * @param {number} value\r\n   *\r\n   * @memberof types.Uint8\r\n   *\r\n   * @instance\r\n   */\r\n  set (value) { this.uint8 = value }\r\n}\r\n","import Struct from '../struct'\r\n\r\nimport Short from './short'\r\nimport Float32BE from './float32be'\r\nimport Float32LE from './float32le'\r\nimport Int32BE from './int32be'\r\nimport Int32LE from './int32le'\r\nimport Uint32BE from './uint32be'\r\nimport Uint32LE from './uint32le'\r\n\r\n/**\r\n * A union of all 4-byte predefined types.\r\n *\r\n * @class Word\r\n *\r\n * @extends Struct\r\n *\r\n * @borrows types.Float32BE#float32be as #float32be\r\n * @borrows types.Float32LE#float32le as #float32le\r\n * @borrows types.Int32BE#int32be as #int32be\r\n * @borrows types.Int32LE#int32le as #int32le\r\n * @borrows types.Uint32BE#uint32be as #uint32be\r\n * @borrows types.Uint32LE#uint32le as #uint32le\r\n *\r\n * @memberof types\r\n *\r\n * @mixin\r\n */\r\n\r\n/**\r\n * Byte length of instances.\r\n *\r\n * @member {number} [byteLength=4]\r\n *\r\n * @memberof types.Word\r\n *\r\n * @static\r\n *\r\n * @readonly\r\n */\r\nexport default Struct.union(\r\n  Float32BE,\r\n  Float32LE,\r\n  Int32BE,\r\n  Int32LE,\r\n  Uint32BE,\r\n  Uint32LE,\r\n  Struct.extend(\r\n    /**\r\n     * First 2 bytes of ArrayBuffer as Short.\r\n     *\r\n     * @member {Short} lo\r\n     *\r\n     * @memberof Word\r\n     *\r\n     * @instance\r\n     */\r\n    { name: 'lo', type: Short },\r\n\r\n    /**\r\n     * Last 2 bytes of ArrayBuffer as Short.\r\n     *\r\n     * @member {Short} hi\r\n     *\r\n     * @memberof Word\r\n     *\r\n     * @instance\r\n     */\r\n    { name: 'hi', type: Short }\r\n  )\r\n)\r\n"]}