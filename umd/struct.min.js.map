{"version":3,"sources":["node_modules/browser-pack/_prelude.js","index.js","node_modules/base64-js/index.js","node_modules/buffer/index.js","node_modules/ieee754/index.js","src/define.js","src/merge.js","src/struct.js"],"names":["f","exports","module","define","amd","window","global","self","this","Struct","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","_struct2","default","placeHoldersCount","b64","len","tripletToBase64","num","lookup","encodeChunk","uint8","start","end","tmp","output","push","join","byteLength","toByteArray","placeHolders","arr","Arr","L","revLookup","charCodeAt","fromByteArray","extraBytes","parts","len2","Uint8Array","Array","createBuffer","K_MAX_LENGTH","RangeError","buf","__proto__","Buffer","prototype","arg","encodingOrOffset","allocUnsafe","from","value","TypeError","isArrayBuffer","fromArrayBuffer","fromString","fromObject","assertSize","size","alloc","fill","encoding","undefined","checked","string","isEncoding","actual","write","slice","fromArrayLike","array","byteOffset","obj","isBuffer","copy","isArrayBufferView","numberIsNaN","type","isArray","data","toString","loweredCase","utf8ToBytes","base64ToBytes","toLowerCase","slowToString","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","b","m","bidirectionalIndexOf","buffer","val","dir","arrayIndexOf","indexOf","lastIndexOf","read","indexSize","readUInt16BE","arrLength","valLength","String","foundIndex","found","j","hexWrite","offset","Number","remaining","strLen","parsed","parseInt","substr","utf8Write","blitBuffer","asciiWrite","asciiToBytes","latin1Write","base64Write","ucs2Write","utf16leToBytes","base64","Math","min","res","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","decodeCodePointsArray","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","apply","ret","out","toHex","bytes","checkOffset","ext","checkInt","max","checkIEEE754","writeFloat","littleEndian","noAssert","ieee754","writeDouble","base64clean","str","trim","replace","INVALID_BASE64_RE","units","Infinity","leadSurrogate","byteArray","c","hi","lo","src","dst","ArrayBuffer","constructor","name","isView","SlowBuffer","INSPECT_MAX_BYTES","kMaxLength","TYPED_ARRAY_SUPPORT","foo","typedArraySupport","console","error","Symbol","species","Object","defineProperty","configurable","enumerable","writable","poolSize","allocUnsafeSlow","_isBuffer","compare","x","y","concat","list","pos","swap16","swap32","swap64","arguments","equals","inspect","match","target","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","toJSON","_arr","newBuf","subarray","readUIntLE","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","pow","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","set","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","d","NaN","rt","abs","isNaN","floor","log","LN2","isStruct","createGetter","createSetter","Class","_ref","option","_ref$byteLength","_ref$byteOffset","getter","setter","descriptor","assign","get","Union","key","hasOwnProperty","getOwnPropertyDescriptor","_buffer","_classCallCheck","_possibleConstructorReturn","getPrototypeOf","DataView","_class","_temp","_len","descriptors","_key","reduce","_define2","_inherits","create","_len2","Classes","_key2","_merge2","extend","typedArray"],"mappings":"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","file":"struct.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import Struct from './src/struct'\n\nmodule.exports = Struct\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction placeHoldersCount (b64) {\n  var len = b64.length\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // the number of equal signs (place holders)\n  // if there are two placeholders, than the two characters before it\n  // represent one byte\n  // if there is only one, then the three characters before it represent 2 bytes\n  // this is just a cheap hack to not do indexOf twice\n  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0\n}\n\nfunction byteLength (b64) {\n  // base64 is 4/3 + up to two characters of the original data\n  return (b64.length * 3 / 4) - placeHoldersCount(b64)\n}\n\nfunction toByteArray (b64) {\n  var i, l, tmp, placeHolders, arr\n  var len = b64.length\n  placeHolders = placeHoldersCount(b64)\n\n  arr = new Arr((len * 3 / 4) - placeHolders)\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  l = placeHolders > 0 ? len - 4 : len\n\n  var L = 0\n\n  for (i = 0; i < l; i += 4) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]\n    arr[L++] = (tmp >> 16) & 0xFF\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  if (placeHolders === 2) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[L++] = tmp & 0xFF\n  } else if (placeHolders === 1) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var output = ''\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    output += lookup[tmp >> 2]\n    output += lookup[(tmp << 4) & 0x3F]\n    output += '=='\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])\n    output += lookup[tmp >> 10]\n    output += lookup[(tmp >> 4) & 0x3F]\n    output += lookup[(tmp << 2) & 0x3F]\n    output += '='\n  }\n\n  parts.push(output)\n\n  return parts.join('')\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nvar K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('Invalid typed array length')\n  }\n  // Return an augmented `Uint8Array` instance\n  var buf = new Uint8Array(length)\n  buf.__proto__ = Buffer.prototype\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\n// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\nif (typeof Symbol !== 'undefined' && Symbol.species &&\n    Buffer[Symbol.species] === Buffer) {\n  Object.defineProperty(Buffer, Symbol.species, {\n    value: null,\n    configurable: true,\n    enumerable: false,\n    writable: false\n  })\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (isArrayBuffer(value)) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  return fromObject(value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nBuffer.prototype.__proto__ = Uint8Array.prototype\nBuffer.__proto__ = Uint8Array\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  var buf = createBuffer(length)\n\n  var actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  var buf = createBuffer(length)\n  for (var i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  var buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  buf.__proto__ = Buffer.prototype\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    var buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj) {\n    if (isArrayBufferView(obj) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n        return createBuffer(0)\n      }\n      return fromArrayLike(obj)\n    }\n\n    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n      return fromArrayLike(obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (isArrayBufferView(string) || isArrayBuffer(string)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  newBuf.__proto__ = Buffer.prototype\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : new Buffer(val, encoding)\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffers from another context (i.e. an iframe) do not pass the `instanceof` check\n// but they should be treated as valid. See: https://github.com/feross/buffer/issues/166\nfunction isArrayBuffer (obj) {\n  return obj instanceof ArrayBuffer ||\n    (obj != null && obj.constructor != null && obj.constructor.name === 'ArrayBuffer' &&\n      typeof obj.byteLength === 'number')\n}\n\n// Node 0.10 supports `ArrayBuffer` but lacks `ArrayBuffer.isView`\nfunction isArrayBufferView (obj) {\n  return (typeof ArrayBuffer.isView === 'function') && ArrayBuffer.isView(obj)\n}\n\nfunction numberIsNaN (obj) {\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","export default function defineProperty (Class, {\r\n  name, type, option,\r\n  byteLength = length.call(Class, type),\r\n  byteOffset = Class.byteLength\r\n}) {\r\n  const getter = createGetter.call(Class, type)\r\n  const setter = createSetter.call(Class, type)\r\n\r\n  const descriptor = {\r\n    configurable: true,\r\n    enumerable: true\r\n  }\r\n\r\n  if (type === 'String') {\r\n    Object.assign(descriptor, {\r\n      get () {\r\n        return getter.call(this, byteOffset, byteLength, option)\r\n      },\r\n      set (value) {\r\n        return setter.call(this, byteOffset, byteLength, value, option)\r\n      }\r\n    })\r\n  } else {\r\n    Object.assign(descriptor, {\r\n      get () {\r\n        return getter.call(this, byteOffset, option)\r\n      },\r\n      set (value) {\r\n        return setter.call(this, byteOffset, value, option)\r\n      }\r\n    })\r\n  }\r\n\r\n  Object.defineProperty(Class.prototype, name, descriptor)\r\n\r\n  return Object.assign(Class, { byteLength: byteOffset + byteLength })\r\n}\r\n\r\nfunction length (type) {\r\n  switch (type) {\r\n    case 'Int8':\r\n    case 'Uint8':\r\n      return 1\r\n    case 'Int16':\r\n    case 'Uint16':\r\n      return 2\r\n    case 'Float32':\r\n    case 'Int32':\r\n    case 'Uint32':\r\n      return 4\r\n    case 'Float64':\r\n      return 8\r\n    case 'String':\r\n      throw new TypeError('byteLength is required for String type')\r\n    default:\r\n      if (this.isStruct(type)) {\r\n        return type.byteLength\r\n      }\r\n\r\n      throw new TypeError(`Unexpected type ${type}`)\r\n  }\r\n}\r\n\r\nfunction createGetter (type) {\r\n  return this.isStruct(type) ? function getter (byteOffset) {\r\n    return type.from(this, this.byteOffset + byteOffset)\r\n  } : this.prototype[`get${type}`]\r\n}\r\n\r\nfunction createSetter (type) {\r\n  return this.isStruct(type) ? function setter (byteOffset, value) {\r\n    return type.from(this, this.byteOffset + byteOffset).set(value)\r\n  } : this.prototype[`set${type}`]\r\n}\r\n","export default function mergeClasses (Union, Class) {\r\n  for (const key in Class.prototype) {\r\n    if (Union.prototype.hasOwnProperty(key)) {\r\n      throw new TypeError(`Union contains conflicting key ${key}`)\r\n    }\r\n\r\n    Object.defineProperty(Union.prototype, key, Object.getOwnPropertyDescriptor(Class.prototype, key))\r\n  }\r\n\r\n  Union.byteLength = Math.max(Union.byteLength, Class.byteLength)\r\n\r\n  return Union\r\n}\r\n","import { Buffer } from 'buffer'\r\n\r\nimport defineProperty from './define'\r\nimport mergeClasses from './merge'\r\n\r\n/**\r\n * @external ArrayBuffer\r\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer|ArrayBuffer}\r\n */\r\n\r\n/**\r\n * @external Buffer\r\n * @see {@link https://nodejs.org/api/buffer.html|Buffer}\r\n */\r\n\r\n/**\r\n * @external DataView\r\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView|DataView}\r\n */\r\n\r\n/**\r\n * @external TypedArray\r\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray|TypedArray}\r\n */\r\n\r\n/**\r\n * @external TypeError\r\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError|TypeError}\r\n */\r\n\r\n/**\r\n * @class Struct\r\n *\r\n * @extends external:DataView\r\n *\r\n * @param {external:ArrayBuffer} buffer - An instance of ArrayBuffer to view.\r\n * @param {number} [byteOffset=0] - Byte offset at which to view ArrayBuffer.\r\n *\r\n * @example\r\n * // create 3 classes\r\n * const Int32 = Struct.extend({ name: 'i32', type: 'Int32' })\r\n * const Uint32 = Struct.extend({ name: 'u32', type: 'Uint32' })\r\n * const Utf8 = Struct.extend({\r\n *   name: 'str',\r\n *   type: 'String',\r\n *   byteLength: 4,\r\n *   option: 'binary'\r\n * })\r\n * // create a union of the 3 classes\r\n * const Union = Struct.union(Int32, Uint32, Utf8)\r\n * // create an instance of the union to view an array buffer\r\n * let union = new Union(new ArrayBuffer(Union.byteLength))\r\n * // set the string using binary encoding\r\n * union.str = 'ßé+å'\r\n * // check uint32 value\r\n * console.log(union.u32.toString(16))\r\n * // reverse bytes\r\n * union.setUint32(0, union.getUint32(0, true), false)\r\n * // print all members\r\n * for (const key in union) console.log(key, union[key].toString(16))\r\n */\r\nexport default class Struct extends DataView {\r\n  /**\r\n   * Byte length of instances.\r\n   *\r\n   * @member {number} [byteLength=0]\r\n   *\r\n   * @memberof Struct\r\n   *\r\n   * @static\r\n   */\r\n  static byteLength = 0\r\n\r\n  /**\r\n   * Creates a class that extends Struct with members defined by arguments.\r\n   *\r\n   * @method extend\r\n   *\r\n   * @param {...Object} descriptors - Instance member definitions for extended class.\r\n   * @param {string} descriptors[].name - The member name.\r\n   * @param {string|Struct} descriptors[].type - The member type. Accepts strings 'Int8', 'Uint8', 'Int16', 'Uint16', 'Float32', 'Int32', 'Uint32', 'Float64', 'String', or any constructor that extends Struct.\r\n   * @param {*} [descriptors[].option] - An optional argument to append to the accessor methods of the member.\r\n   * @param {number} [descriptors[].byteLength] - Determined using type by default. Required when type is 'String'.\r\n   * @param {number} [descriptors[].byteOffset] - Determined using order of descriptors by default.\r\n   *\r\n   * @throws {external:TypeError} Unexpected type.\r\n   * @throws {external:TypeError} byteLength is required for String type.\r\n   *\r\n   * @return {constructor}\r\n   *\r\n   * @memberof Struct\r\n   *\r\n   * @static\r\n   */\r\n  static extend (...descriptors) {\r\n    return descriptors.reduce(defineProperty, class extends this {\r\n      static byteLength = this.byteLength\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Creates an instance of Struct to view given value at byteOffset.\r\n   *\r\n   * @method from\r\n   *\r\n   * @param {external:ArrayBuffer|external:Buffer|external:DataView|external:TypedArray} value - A valid ArrayBuffer or view of one.\r\n   * @param {number} [byteOffset=0] - Byte offset at which to view value.\r\n   *\r\n   * @throws {external:TypeError} value must be a valid ArrayBuffer or view.\r\n   *\r\n   * @return {Struct}\r\n   *\r\n   * @memberof Struct\r\n   *\r\n   * @static\r\n   */\r\n  static from (value, byteOffset = 0) {\r\n    if (!ArrayBuffer.isView(value) && !(value instanceof ArrayBuffer)) {\r\n      throw new TypeError('value must be a valid ArrayBuffer or view')\r\n    }\r\n\r\n    return new this(value.buffer || value, byteOffset)\r\n  }\r\n\r\n  /**\r\n   * Validates constructors that extend Struct.\r\n   *\r\n   * @method isStruct\r\n   *\r\n   * @param {*} value - A value to test.\r\n   *\r\n   * @return {boolean}\r\n   *\r\n   * @memberof Struct\r\n   *\r\n   * @static\r\n   */\r\n  static isStruct (value) {\r\n    return typeof value === 'function' && Object.create(value.prototype) instanceof Struct\r\n  }\r\n\r\n  /**\r\n   * Creates a union class that extends Struct with members of all Classes.\r\n   *\r\n   * @method union\r\n   *\r\n   * @param {...constructor} Classes - Classes that extend Struct.\r\n   *\r\n   * @throws {external:TypeError} Union contains conflicting key.\r\n   *\r\n   * @return {constructor}\r\n   *\r\n   * @memberof Struct\r\n   *\r\n   * @static\r\n   */\r\n  static union (...Classes) {\r\n    return Classes.reduce(mergeClasses, this.extend())\r\n  }\r\n\r\n  constructor (buffer, byteOffset = 0) {\r\n    super(buffer, byteOffset, new.target.byteLength)\r\n  }\r\n\r\n  /**\r\n   * Gets string with byteLength and encoding from viewed ArrayBuffer at byteOffset.\r\n   * Depending on data and encoding, returned string may have different length than byteLength.\r\n   *\r\n   * @method getString\r\n   *\r\n   * @param {number} byteOffset - Byte offset within ArrayBuffer of string to read.\r\n   * @param {number} byteLength - Byte length within ArrayBuffer of string to read.\r\n   * @param {string} [encoding=utf8] - Encoding within ArrayBuffer of string to read.\r\n   *\r\n   * @throws {external:TypeError} encoding must be a valid string encoding.\r\n   *\r\n   * @return {string}\r\n   *\r\n   * @memberof Struct\r\n   *\r\n   * @instance\r\n   */\r\n  getString (byteOffset, byteLength, encoding = 'utf8') {\r\n    return Buffer\r\n      .from(this.buffer, this.byteOffset + byteOffset, byteLength)\r\n      .toString(encoding.replace(/[\\W_]/g, '').toLowerCase())\r\n  }\r\n\r\n  /**\r\n   * Sets string with byteLength and encoding to viewed ArrayBuffer at byteOffset.\r\n   * Depending on byteLength and encoding, set string may be truncated or padded.\r\n   *\r\n   * @method setString\r\n   *\r\n   * @param {number} byteOffset - Byte offset within ArrayBuffer of string to write.\r\n   * @param {number} byteLength - Byte length within ArrayBuffer of string to write.\r\n   * @param {string} value - Unencoded string value to write to ArrayBuffer.\r\n   * @param {string} [encoding=utf8] - Encoding within ArrayBuffer of string to write.\r\n   *\r\n   * @throws {external:TypeError} encoding must be a valid string encoding.\r\n   *\r\n   * @memberof Struct\r\n   *\r\n   * @instance\r\n   */\r\n  setString (byteOffset, byteLength, value, encoding = 'utf8') {\r\n    Buffer\r\n      .from(value, encoding.replace(/[\\W_]/g, '').toLowerCase())\r\n      .copy(Buffer.from(this.buffer, this.byteOffset + byteOffset, byteLength))\r\n  }\r\n\r\n  /**\r\n   * Sets memory in ArrayBuffer starting at byteOffset with data from typedArray.\r\n   *\r\n   * @method set\r\n   *\r\n   * @param {external:Buffer|external:DataView|external:TypedArray} typedArray - View of data to copy.\r\n   * @param {number} [byteOffset=0] - Byte offset within ArrayBuffer at which to write.\r\n   *\r\n   * @memberof Struct\r\n   *\r\n   * @instance\r\n   */\r\n  set (typedArray, byteOffset = 0) {\r\n    new Uint8Array(this.buffer, this.byteOffset + byteOffset).set(typedArray)\r\n  }\r\n}\r\n"]}